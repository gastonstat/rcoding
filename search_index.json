[["import-tables.html", "21 Importing Data Tables 21.1 Motivation 21.2 Character Delimited Text 21.3 Importing Data Tables 21.4 In Summary", " 21 Importing Data Tables In this chapter we describe various “standard” ways to import tabular data. By standard I mean using base functions such as read.table() and friends. This is in contrast to alternative functions from packages such as \"readr\", and other packages. There’s a wide range of ways and options to import data tables in R. The authoritative document to know almost all about importing (and exporting) data is the manual R Data Import/Export https://cran.r-project.org/doc/manuals/r-release/R-data.html 21.1 Motivation Say we have a table (see below) with data about the different accounts, the type of bank (brick-and-mortar or online), the annual rate of return, and the balance amount. account bank rate balance savings brick-n-mortar 0.020 1000 money market online 0.025 2000 certificate brick-n-mortar 0.030 3000 brokerage online 0.070 5000 retirement online 0.050 9000 A data table like this one could be stored in various types of files. For example, it could be stored in a Comma Separated Value (CSV), which is a very common kind of text file format to stored tables. Another possible way in which this table could be stored is in a spreadsheet (e.g. Excel, Google Sheets, Mac Numbers). Let’s assume that the table is stored in a text file. Here I want to be a bit more specific about what I mean by text file: By text file I mean a plain text file Plain text as an umbrella term for any file that is in a human-readable form (.txt, .csv, .xml, .html) Text file stored as a sequence of characters Each character stored as a single byte of data Data is arranged in rows, with several values stored on each row Text file that can be read and manipulated with a text editor 21.2 Character Delimited Text A common storage option is to find a way in which we could organize the data in a form that resembles a table or rectangular format. The most common storage option to do this is by using the so-called field-delimiter formats such as comma separated values or CSV. A common way to store data in tabular form is via text files To store the data we need a way to separate data values Each line represents a “row” The idea of “columns” is conveyed with delimiters In summary, fields within each line are separated by the delimiter Quotation marks are used when the delimiter character occurs within one of the fields There are two main subtypes of plain text format, depending on how the separated values are identified in a row Delimited formats Fixed-width formats 21.2.1 Delimited Formats In a delimited format, values within a row are separated by a special character, or delimiter Delimiter Description \" \" white space \",\" comma \"\\t\" tab \";\" semicolon Space Delimited Example of a space delimited file (common file extension .txt) account bank rate balance savings bricknmor 0.020 1000 monmarket online 0.025 2000 certificate bricknmor 0.030 3000 brokerage online 0.070 5000 retirement online 0.050 9000 Tab Delimited Example of a tab delimited file (common file extensions .txt or .tsv) account bank rate balance savings bricknmor 0.020 1000 monmarket online 0.025 2000 certificate bricknmor 0.030 3000 brokerage online 0.070 5000 retirement online 0.050 9000 Comma Delimited Example of a comma delimited file (common file extension .csv) account,bank,rate,balance savings,bricknmor,0.020,1000 monmarket,online,0.025,2000 certificate,bricknmor,0.030,3000 brokerage,online,0.070,5000 retirement,online,0.050,9000 Fixed-Width Format Example of a fixed width delimited file (common file extension .txt) account bank rate balance savings bricknmor 0.020 1000 monmarket online 0.025 2000 certificate bricknmor 0.030 3000 brokerage online 0.070 5000 retirement online 0.050 9000 21.3 Importing Data Tables Considerations before importing a data table in R What is the character(s) used as field delimiter? Does the file contain names of columns? Does the file contain a column for row names? Are there any missing values? How are missing values codified? Do you want to read in all rows? Do you need to convert delimiter characters? (e.g. from space to comma) Can you determine the data-type of each column? Are there any uninformative numbers? Can you convert those uninformative numbers to informative labels? 21.3.1 Function read.table() and friends The most common way to read and import tables in R is by using read.table() and friends (read.csv(), read.delim(), etc) read.table(file, header = FALSE, sep = &quot;&quot;, quote = &quot;\\&quot;&#39;&quot;, dec = &quot;.&quot;, row.names, col.names, as.is = !stringsAsFactors, na.strings = &quot;NA&quot;, colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, comment.char = &quot;#&quot;, allowEscapes = FALSE, flush = FALSE, stringsAsFactors = default.stringsAsFactors(), fileEncoding = &quot;&quot;, encoding = &quot;unknown&quot;, text, skipNul = FALSE) Some read.table() arguments Argument Description file Name of file header Whether column names are in 1st line sep Character used as field separator quote Quoting characters dec Character for decimal point row.names Optional vector of row names col.names Optional vector of column names na.strings Characters treated as missing values colClasses Optional vector of data types for columns nrows Maximum number of rows to read in skip Number of lines to skip before reading data check.names Check valid column names stringsAsFactors Should characters be converted to factors In versions of R &lt; 4.0.0, read.table() and friends convert character strings into factors by default. In addition to read.table(), there’s a handful of sibling functions to read other types of text files: Function Description read.csv() comma separated values read.csv2() semicolon separated values (Europe) read.delim() tab separated values read.delim2() tab separated values (Europe) 21.3.2 Reading space-separated files For simplicity’s sake, we’ll assume that all data files are located in your working directory. Suppose you have the following data in a file: accounts.txt account bank rate balance savings bricknmor 0.020 1000 monmarket online 0.025 2000 certificate bricknmor 0.030 3000 brokerage online 0.070 5000 retirement online 0.050 9000 Example 1. Importing table in blank separated file # using read.table() dat &lt;- read.table( file = &quot;accounts.txt&quot;, header = TRUE) The imported data frame dat will be: #&gt; account bank rate balance #&gt; 1 savings bricknmor 0.020 1000 #&gt; 2 monmarket online 0.025 2000 #&gt; 3 certificate bricknmor 0.030 3000 #&gt; 4 brokerage online 0.070 5000 #&gt; 5 retirement online 0.050 9000 Example 2. Limit the number of rows to read in (first 2 rows): dat &lt;- read.table( file = &quot;accounts.txt&quot;, header = TRUE, nrows = 2) The imported data frame dat will be: #&gt; account bank rate balance #&gt; 1 savings bricknmor 0.020 1000 #&gt; 2 monmarket online 0.025 2000 Example 3. Skip the first row (no header) and limit the number of rows to read in (4 rows) dat &lt;- read.table( file = &quot;accounts.txt&quot;, header = FALSE, skip = 1, nrows = 4) The imported data frame dat will be: #&gt; V1 V2 V3 V4 #&gt; 1 savings bricknmor 0.020 1000 #&gt; 2 monmarket online 0.025 2000 #&gt; 3 certificate bricknmor 0.030 3000 #&gt; 4 brokerage online 0.070 5000 Example 4. Skip importing the second column (bank) dat &lt;- read.table( file = &quot;accounts.txt&quot;, header = TRUE, colClasses = c( &quot;character&quot;, &quot;NULL&quot;, &quot;numeric&quot;, &quot;numeric&quot;)) The imported data frame dat will be: #&gt; account rate balance #&gt; 1 savings 0.020 1000 #&gt; 2 monmarket 0.025 2000 #&gt; 3 certificate 0.030 3000 #&gt; 4 brokerage 0.070 5000 #&gt; 5 retirement 0.050 9000 21.3.3 Reading comma-separated files with read.csv() Let’s now consider a data table stored in a CSV file: accounts.csv account,bank,rate,balance savings,bricknmor,0.020,1000 monmarket,online,0.025,2000 certificate,bricknmor,0.030,3000 brokerage,online,0.070,5000 retirement,online,0.050,9000 Example 1. Data in comma separated value (CSV) file We can use read.table() # using read.table() dat &lt;- read.table( file = &quot;accounts.csv&quot;, header = TRUE, sep = &quot;,&quot;) Or more conveniently, we can use read.csv() # using read.csv() dat &lt;- read.csv(file = &quot;accounts.csv&quot;) The imported data frame dat will be: #&gt; account bank rate balance #&gt; 1 savings bricknmor 0.020 1000 #&gt; 2 monmarket online 0.025 2000 #&gt; 3 certificate bricknmor 0.030 3000 #&gt; 4 brokerage online 0.070 5000 #&gt; 5 retirement online 0.050 9000 21.4 In Summary What is the field separator? space \" \" tab \"\\t\" comma \",\" semicolon \";\" other? Does the data file contains: row names? column names? missing values? special characters? So far … There are multiple ways to import data tables The workhorse function is read.table() But you can use the other wrappers, e.g. read.csv() The output is a \"data.frame\" object "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
